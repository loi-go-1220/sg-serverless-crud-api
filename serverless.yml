service: book-library-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    BOOKS_TABLE: ${self:service}-${self:provider.stage}-books
    STAGE: ${self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Query
      Resource:
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}
        - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.BOOKS_TABLE}/index/*

plugins:
  - serverless-plugin-typescript

functions:
  createBook:
    handler: src/handlers/createBook.handler
    events:
      - http:
          path: books
          method: post
          cors: true
          
  getBooks:
    handler: src/handlers/getBooks.handler
    events:
      - http:
          path: books
          method: get
          cors: true
          
  getBook:
    handler: src/handlers/getBook.handler
    events:
      - http:
          path: books/{id}
          method: get
          cors: true

resources:
  Resources:
    BooksTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BOOKS_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        Tags:
          - Key: Environment
            Value: ${self:provider.stage}
          - Key: Service
            Value: ${self:service}

custom:
  # Custom variables for different stages
  dev:
    region: us-east-1
  prod:
    region: us-east-1
